// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider                    = "node node_modules/prisma-nestjs-graphql"
  output                      = "../src/@generated"
  useInputType_CreateOne_data = "matcher:*UncheckedCreateInput"
  noAtomicOperations          = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  /// @HideField({ input: true })
  id                        String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName                 String
  lastName                  String
  email                     String    @unique
  language                  String    @default("en")
  /// @HideField({ output: true, input: true })
  password                  String?
  /// @HideField({ output: true, input: true })
  resetPasswordToken        String?   @unique
  /// @HideField({ output: true, input: true })
  resetPasswordTokenExpires DateTime?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  isActive                  Boolean   @default(true)
  /// @HideField({ output: true, input: true })
  modelName                 String    @default("User")

  /// @HideField({ output: true, input: true })
  authProvider AuthProvider @default(LOCAL)

  /// @HideField({ output: true, input: true })
  authProviderId String?

  /// @HideField({ output: true, input: true })
  students     Student[]
  StudentsList StudentsList[]
}

enum AuthProvider {
  LOCAL
  GOOGLE
}

enum Genre {
  MALE
  FEMALE
}

model Student {
  /// @HideField({ match: ['*UpdateInput', '*CreateInput'] })
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  firstLastName  String
  secondLastName String?
  phone          String?
  address        String?
  genre          Genre?
  birthDate      DateTime?
  comments       String?
  tutorFullName  String?
  extraPhone     String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  /// @HideField({ match: '*UpdateInput' })
  user   User   @relation(fields: [userId], references: [id])
  /// @HideField({ match: '*UpdateInput' })
  userId String @db.ObjectId

  /// @HideField({ output: true, input: true })
  modelName      String        @default("Student")
  StudentsList   StudentsList? @relation(fields: [studentsListId], references: [id])
  studentsListId String?       @db.ObjectId
}

model StudentsList {
  /// @HideField({ match: ['*UpdateInput', '*CreateInput'] })
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  comments  String?
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  /// @HideField({ match: '*UpdateInput' })
  user User @relation(fields: [userId], references: [id])
  /// @HideField({ match: '*UpdateInput' })
  userId String @db.ObjectId

  /// @HideField({ output: true, input: true })
  modelName String @default("StudentsList")
}
